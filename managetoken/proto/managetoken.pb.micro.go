// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/managetoken.proto

package managetoken

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/protobuf/types/known/structpb"
	math "math"
)

import (
	context "context"
	api "github.com/micro/micro/v3/service/api"
	client "github.com/micro/micro/v3/service/client"
	server "github.com/micro/micro/v3/service/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Managetoken service

func NewManagetokenEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Managetoken service

type ManagetokenService interface {
	CreateToken(ctx context.Context, in *CreateTokenRequest, opts ...client.CallOption) (*CreateTokenResponse, error)
}

type managetokenService struct {
	c    client.Client
	name string
}

func NewManagetokenService(name string, c client.Client) ManagetokenService {
	return &managetokenService{
		c:    c,
		name: name,
	}
}

func (c *managetokenService) CreateToken(ctx context.Context, in *CreateTokenRequest, opts ...client.CallOption) (*CreateTokenResponse, error) {
	req := c.c.NewRequest(c.name, "Managetoken.CreateToken", in)
	out := new(CreateTokenResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Managetoken service

type ManagetokenHandler interface {
	CreateToken(context.Context, *CreateTokenRequest, *CreateTokenResponse) error
}

func RegisterManagetokenHandler(s server.Server, hdlr ManagetokenHandler, opts ...server.HandlerOption) error {
	type managetoken interface {
		CreateToken(ctx context.Context, in *CreateTokenRequest, out *CreateTokenResponse) error
	}
	type Managetoken struct {
		managetoken
	}
	h := &managetokenHandler{hdlr}
	return s.Handle(s.NewHandler(&Managetoken{h}, opts...))
}

type managetokenHandler struct {
	ManagetokenHandler
}

func (h *managetokenHandler) CreateToken(ctx context.Context, in *CreateTokenRequest, out *CreateTokenResponse) error {
	return h.ManagetokenHandler.CreateToken(ctx, in, out)
}
