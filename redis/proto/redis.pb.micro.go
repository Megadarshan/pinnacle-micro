// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/redis.proto

package redis

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/micro/v3/service/api"
	client "github.com/micro/micro/v3/service/client"
	server "github.com/micro/micro/v3/service/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Redis service

func NewRedisEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Redis service

type RedisService interface {
	Set(ctx context.Context, in *SetRequest, opts ...client.CallOption) (*SetResponse, error)
	Get(ctx context.Context, in *GetRequest, opts ...client.CallOption) (*GetResponse, error)
	Delete(ctx context.Context, in *DeleteRequest, opts ...client.CallOption) (*DeleteResponse, error)
}

type redisService struct {
	c    client.Client
	name string
}

func NewRedisService(name string, c client.Client) RedisService {
	return &redisService{
		c:    c,
		name: name,
	}
}

func (c *redisService) Set(ctx context.Context, in *SetRequest, opts ...client.CallOption) (*SetResponse, error) {
	req := c.c.NewRequest(c.name, "Redis.Set", in)
	out := new(SetResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *redisService) Get(ctx context.Context, in *GetRequest, opts ...client.CallOption) (*GetResponse, error) {
	req := c.c.NewRequest(c.name, "Redis.Get", in)
	out := new(GetResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *redisService) Delete(ctx context.Context, in *DeleteRequest, opts ...client.CallOption) (*DeleteResponse, error) {
	req := c.c.NewRequest(c.name, "Redis.Delete", in)
	out := new(DeleteResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Redis service

type RedisHandler interface {
	Set(context.Context, *SetRequest, *SetResponse) error
	Get(context.Context, *GetRequest, *GetResponse) error
	Delete(context.Context, *DeleteRequest, *DeleteResponse) error
}

func RegisterRedisHandler(s server.Server, hdlr RedisHandler, opts ...server.HandlerOption) error {
	type redis interface {
		Set(ctx context.Context, in *SetRequest, out *SetResponse) error
		Get(ctx context.Context, in *GetRequest, out *GetResponse) error
		Delete(ctx context.Context, in *DeleteRequest, out *DeleteResponse) error
	}
	type Redis struct {
		redis
	}
	h := &redisHandler{hdlr}
	return s.Handle(s.NewHandler(&Redis{h}, opts...))
}

type redisHandler struct {
	RedisHandler
}

func (h *redisHandler) Set(ctx context.Context, in *SetRequest, out *SetResponse) error {
	return h.RedisHandler.Set(ctx, in, out)
}

func (h *redisHandler) Get(ctx context.Context, in *GetRequest, out *GetResponse) error {
	return h.RedisHandler.Get(ctx, in, out)
}

func (h *redisHandler) Delete(ctx context.Context, in *DeleteRequest, out *DeleteResponse) error {
	return h.RedisHandler.Delete(ctx, in, out)
}
