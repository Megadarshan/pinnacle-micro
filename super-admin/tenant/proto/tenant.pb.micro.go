// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/tenant.proto

package tenant

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/micro/v3/service/api"
	client "github.com/micro/micro/v3/service/client"
	server "github.com/micro/micro/v3/service/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Tenant service

func NewTenantEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Tenant service

type TenantService interface {
	GetTenantStatus(ctx context.Context, in *TenantStatusRequest, opts ...client.CallOption) (*TenantStatusResponse, error)
	GetTenantType(ctx context.Context, in *TenantTypeRequest, opts ...client.CallOption) (*TenantTypeResponse, error)
	CreateTenant(ctx context.Context, in *CreateTenantRequest, opts ...client.CallOption) (*CreateTenantResponse, error)
	//  rpc GetTenant(GetTenantRequest) returns (GetTenantResponse) {}
	ListTenants(ctx context.Context, in *ListTenantsRequest, opts ...client.CallOption) (*ListTenantsResponse, error)
	UpdateTenant(ctx context.Context, in *UpdateTenantRequest, opts ...client.CallOption) (*UpdateTenantResponse, error)
	DeleteTenant(ctx context.Context, in *DeleteTenantRequest, opts ...client.CallOption) (*DeleteTenantResponse, error)
}

type tenantService struct {
	c    client.Client
	name string
}

func NewTenantService(name string, c client.Client) TenantService {
	return &tenantService{
		c:    c,
		name: name,
	}
}

func (c *tenantService) GetTenantStatus(ctx context.Context, in *TenantStatusRequest, opts ...client.CallOption) (*TenantStatusResponse, error) {
	req := c.c.NewRequest(c.name, "Tenant.GetTenantStatus", in)
	out := new(TenantStatusResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenantService) GetTenantType(ctx context.Context, in *TenantTypeRequest, opts ...client.CallOption) (*TenantTypeResponse, error) {
	req := c.c.NewRequest(c.name, "Tenant.GetTenantType", in)
	out := new(TenantTypeResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenantService) CreateTenant(ctx context.Context, in *CreateTenantRequest, opts ...client.CallOption) (*CreateTenantResponse, error) {
	req := c.c.NewRequest(c.name, "Tenant.CreateTenant", in)
	out := new(CreateTenantResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenantService) ListTenants(ctx context.Context, in *ListTenantsRequest, opts ...client.CallOption) (*ListTenantsResponse, error) {
	req := c.c.NewRequest(c.name, "Tenant.ListTenants", in)
	out := new(ListTenantsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenantService) UpdateTenant(ctx context.Context, in *UpdateTenantRequest, opts ...client.CallOption) (*UpdateTenantResponse, error) {
	req := c.c.NewRequest(c.name, "Tenant.UpdateTenant", in)
	out := new(UpdateTenantResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenantService) DeleteTenant(ctx context.Context, in *DeleteTenantRequest, opts ...client.CallOption) (*DeleteTenantResponse, error) {
	req := c.c.NewRequest(c.name, "Tenant.DeleteTenant", in)
	out := new(DeleteTenantResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Tenant service

type TenantHandler interface {
	GetTenantStatus(context.Context, *TenantStatusRequest, *TenantStatusResponse) error
	GetTenantType(context.Context, *TenantTypeRequest, *TenantTypeResponse) error
	CreateTenant(context.Context, *CreateTenantRequest, *CreateTenantResponse) error
	//  rpc GetTenant(GetTenantRequest) returns (GetTenantResponse) {}
	ListTenants(context.Context, *ListTenantsRequest, *ListTenantsResponse) error
	UpdateTenant(context.Context, *UpdateTenantRequest, *UpdateTenantResponse) error
	DeleteTenant(context.Context, *DeleteTenantRequest, *DeleteTenantResponse) error
}

func RegisterTenantHandler(s server.Server, hdlr TenantHandler, opts ...server.HandlerOption) error {
	type tenant interface {
		GetTenantStatus(ctx context.Context, in *TenantStatusRequest, out *TenantStatusResponse) error
		GetTenantType(ctx context.Context, in *TenantTypeRequest, out *TenantTypeResponse) error
		CreateTenant(ctx context.Context, in *CreateTenantRequest, out *CreateTenantResponse) error
		ListTenants(ctx context.Context, in *ListTenantsRequest, out *ListTenantsResponse) error
		UpdateTenant(ctx context.Context, in *UpdateTenantRequest, out *UpdateTenantResponse) error
		DeleteTenant(ctx context.Context, in *DeleteTenantRequest, out *DeleteTenantResponse) error
	}
	type Tenant struct {
		tenant
	}
	h := &tenantHandler{hdlr}
	return s.Handle(s.NewHandler(&Tenant{h}, opts...))
}

type tenantHandler struct {
	TenantHandler
}

func (h *tenantHandler) GetTenantStatus(ctx context.Context, in *TenantStatusRequest, out *TenantStatusResponse) error {
	return h.TenantHandler.GetTenantStatus(ctx, in, out)
}

func (h *tenantHandler) GetTenantType(ctx context.Context, in *TenantTypeRequest, out *TenantTypeResponse) error {
	return h.TenantHandler.GetTenantType(ctx, in, out)
}

func (h *tenantHandler) CreateTenant(ctx context.Context, in *CreateTenantRequest, out *CreateTenantResponse) error {
	return h.TenantHandler.CreateTenant(ctx, in, out)
}

func (h *tenantHandler) ListTenants(ctx context.Context, in *ListTenantsRequest, out *ListTenantsResponse) error {
	return h.TenantHandler.ListTenants(ctx, in, out)
}

func (h *tenantHandler) UpdateTenant(ctx context.Context, in *UpdateTenantRequest, out *UpdateTenantResponse) error {
	return h.TenantHandler.UpdateTenant(ctx, in, out)
}

func (h *tenantHandler) DeleteTenant(ctx context.Context, in *DeleteTenantRequest, out *DeleteTenantResponse) error {
	return h.TenantHandler.DeleteTenant(ctx, in, out)
}
